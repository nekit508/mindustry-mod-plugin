import java.util.function.Consumer

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://www.jitpack.io" }
        maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    }

    dependencies {
        classpath "com.github.Anuken.Arc:arc-core:v146"
    }
}

allprojects.each { Project project ->
    project.plugins.apply("java")
    project.plugins.apply("idea")
    project.plugins.apply("maven-publish")

    project.version = properties.get("version")
    project.group = properties.get("group")
}

wrapper {
    gradleVersion = "8.1.1"
}

sourceSets.main.java.srcDirs = []
sourceSets.main.resources.srcDirs = []

tasks.create("createJarList") {
    new File("")
}

task deploy {
    dependsOn subprojects.stream().<Task>map(p -> p.tasks.jar).toArray()
}

ext {
    localProperties = new Properties()
    if (new File("$rootProject.projectDir/local.properties").exists())
        localProperties.load(new FileInputStream(new File("$rootProject.projectDir/local.properties")))

    setIfHasProp = { String property, Consumer<Object> set ->
        if (localProperties.containsKey(property))
            set.accept(localProperties.get(property))
    }
}

subprojects.each { Project project ->
    project.sourceSets.main.java.srcDirs = ["src"]
    project.sourceSets.main.resources.srcDirs = ["res"]

    project.repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
        maven { url "https://www.jitpack.io" }
    }

    project.tasks.withType(JavaCompile) {
        rootProject.ext.setIfHasProp("org.gradle.java.home", v -> options.forkOptions.executable = v)

        options.encoding = "UTF-8"
        options.compilerArgs += ["-Xlint:none"]
        options.generatedSourceOutputDirectory.set(project.file("gen"))
        options.forkOptions.jvmArgs.addAll([
                "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
                "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
                "--add-opens=java.base/sun.reflect.annotation=ALL-UNNAMED"
        ])

        doFirst {
            delete options.generatedSourceOutputDirectory.get().asFile.listFiles()
        }
    }

    project.tasks.create("copyJar") {
        doLast {
            copy {
                from project.tasks.jar
                into rootProject.file("output")
            }
        }
    }

    project.tasks.jar {
        archiveFileName = "simpleupdater-" + project.name

        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            project.configurations.runtimeClasspath.collect { File file ->
                file.isDirectory() ? file : zipTree(file)
            }
        }

        finalizedBy project.tasks.copyJar
    }
}